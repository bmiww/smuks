(DEFPACKAGE :WL
  (:USE #:CL)
  (:EXPORT WL-OBJECT *OBJECTS*))

(IN-PACKAGE :WL)

(DEFVAR *OBJECTS* (MAKE-HASH-TABLE :TEST 'EQ))

(DEFCLASS WL-OBJECT NIL ((ID :INITARG :ID :ACCESSOR ID)))

(DEFMETHOD INITIALIZE-INSTANCE :AFTER ((OBJ "wl-object") &KEY)
  (SETF (GETHASH (ID OBJ) WL:*OBJECTS*) OBJ))

((DEFPACKAGE :WL_DISPLAY) (IN-PACKAGE :WL_DISPLAY)
 (DEFCLASS WL_DISPLAY (WL:WL-OBJECT)
           ((CLIENT :INITARG :CLIENT :ACCESSOR CLIENT)))
 (DEFMETHOD EVT-ERROR ((OBJ WL_DISPLAY) OBJECT_ID CODE MESSAGE))
 (DEFMETHOD EVT-DELETE_ID ((OBJ WL_DISPLAY) ID))
 (DEFMETHOD REQ-SYNC ((OBJ WL_DISPLAY) CALLBACK))
 (DEFMETHOD REQ-GET_REGISTRY ((OBJ WL_DISPLAY) REGISTRY))
 (DEFMETHOD MATCH-EVENT-OPCODE ((OBJ "wl_display") OPCODE)
   (NTH OPCODE '(EVT-ERROR EVT-DELETE_ID)))
 (DEFMETHOD MATCH-REQUEST-OPCODE ((OBJ "wl_display") OPCODE)
   (NTH OPCODE '(EVT-SYNC EVT-GET_REGISTRY))))

((DEFPACKAGE :WL_REGISTRY) (IN-PACKAGE :WL_REGISTRY)
 (DEFCLASS WL_REGISTRY (WL:WL-OBJECT)
           ((CLIENT :INITARG :CLIENT :ACCESSOR CLIENT)))
 (DEFMETHOD EVT-GLOBAL ((OBJ WL_REGISTRY) NAME INTERFACE VERSION))
 (DEFMETHOD EVT-GLOBAL_REMOVE ((OBJ WL_REGISTRY) NAME))
 (DEFMETHOD REQ-BIND ((OBJ WL_REGISTRY) NAME ID))
 (DEFMETHOD MATCH-EVENT-OPCODE ((OBJ "wl_registry") OPCODE)
   (NTH OPCODE '(EVT-GLOBAL EVT-GLOBAL_REMOVE)))
 (DEFMETHOD MATCH-REQUEST-OPCODE ((OBJ "wl_registry") OPCODE)
   (NTH OPCODE '(EVT-BIND))))

((DEFPACKAGE :WL_CALLBACK) (IN-PACKAGE :WL_CALLBACK)
 (DEFCLASS WL_CALLBACK (WL:WL-OBJECT)
           ((CLIENT :INITARG :CLIENT :ACCESSOR CLIENT)))
 (DEFMETHOD EVT-DONE ((OBJ WL_CALLBACK) CALLBACK_DATA))
 (DEFMETHOD MATCH-EVENT-OPCODE ((OBJ "wl_callback") OPCODE)
   (NTH OPCODE '(EVT-DONE)))
 (DEFMETHOD MATCH-REQUEST-OPCODE ((OBJ "wl_callback") OPCODE)
   (NTH OPCODE 'NIL)))

((DEFPACKAGE :WL_COMPOSITOR) (IN-PACKAGE :WL_COMPOSITOR)
 (DEFCLASS WL_COMPOSITOR (WL:WL-OBJECT)
           ((CLIENT :INITARG :CLIENT :ACCESSOR CLIENT)))
 (DEFMETHOD REQ-CREATE_SURFACE ((OBJ WL_COMPOSITOR) ID))
 (DEFMETHOD REQ-CREATE_REGION ((OBJ WL_COMPOSITOR) ID))
 (DEFMETHOD MATCH-EVENT-OPCODE ((OBJ "wl_compositor") OPCODE)
   (NTH OPCODE 'NIL))
 (DEFMETHOD MATCH-REQUEST-OPCODE ((OBJ "wl_compositor") OPCODE)
   (NTH OPCODE '(EVT-CREATE_SURFACE EVT-CREATE_REGION))))

((DEFPACKAGE :WL_SHM_POOL) (IN-PACKAGE :WL_SHM_POOL)
 (DEFCLASS WL_SHM_POOL (WL:WL-OBJECT)
           ((CLIENT :INITARG :CLIENT :ACCESSOR CLIENT)))
 (DEFMETHOD REQ-CREATE_BUFFER
            ((OBJ WL_SHM_POOL) ID OFFSET WIDTH HEIGHT STRIDE FORMAT))
 (DEFMETHOD REQ-DESTROY ((OBJ WL_SHM_POOL)))
 (DEFMETHOD REQ-RESIZE ((OBJ WL_SHM_POOL) SIZE))
 (DEFMETHOD MATCH-EVENT-OPCODE ((OBJ "wl_shm_pool") OPCODE) (NTH OPCODE 'NIL))
 (DEFMETHOD MATCH-REQUEST-OPCODE ((OBJ "wl_shm_pool") OPCODE)
   (NTH OPCODE '(EVT-CREATE_BUFFER EVT-DESTROY EVT-RESIZE))))

((DEFPACKAGE :WL_SHM) (IN-PACKAGE :WL_SHM)
 (DEFCLASS WL_SHM (WL:WL-OBJECT) ((CLIENT :INITARG :CLIENT :ACCESSOR CLIENT)))
 (DEFMETHOD EVT-FORMAT ((OBJ WL_SHM) FORMAT))
 (DEFMETHOD REQ-CREATE_POOL ((OBJ WL_SHM) ID FD SIZE))
 (DEFMETHOD MATCH-EVENT-OPCODE ((OBJ "wl_shm") OPCODE)
   (NTH OPCODE '(EVT-FORMAT)))
 (DEFMETHOD MATCH-REQUEST-OPCODE ((OBJ "wl_shm") OPCODE)
   (NTH OPCODE '(EVT-CREATE_POOL))))

((DEFPACKAGE :WL_BUFFER) (IN-PACKAGE :WL_BUFFER)
 (DEFCLASS WL_BUFFER (WL:WL-OBJECT)
           ((CLIENT :INITARG :CLIENT :ACCESSOR CLIENT)))
 (DEFMETHOD EVT-RELEASE ((OBJ WL_BUFFER)))
 (DEFMETHOD REQ-DESTROY ((OBJ WL_BUFFER)))
 (DEFMETHOD MATCH-EVENT-OPCODE ((OBJ "wl_buffer") OPCODE)
   (NTH OPCODE '(EVT-RELEASE)))
 (DEFMETHOD MATCH-REQUEST-OPCODE ((OBJ "wl_buffer") OPCODE)
   (NTH OPCODE '(EVT-DESTROY))))

((DEFPACKAGE :WL_DATA_OFFER) (IN-PACKAGE :WL_DATA_OFFER)
 (DEFCLASS WL_DATA_OFFER (WL:WL-OBJECT)
           ((CLIENT :INITARG :CLIENT :ACCESSOR CLIENT)))
 (DEFMETHOD EVT-OFFER ((OBJ WL_DATA_OFFER) MIME_TYPE))
 (DEFMETHOD EVT-SOURCE_ACTIONS ((OBJ WL_DATA_OFFER) SOURCE_ACTIONS))
 (DEFMETHOD EVT-ACTION ((OBJ WL_DATA_OFFER) DND_ACTION))
 (DEFMETHOD REQ-ACCEPT ((OBJ WL_DATA_OFFER) SERIAL MIME_TYPE))
 (DEFMETHOD REQ-RECEIVE ((OBJ WL_DATA_OFFER) MIME_TYPE FD))
 (DEFMETHOD REQ-DESTROY ((OBJ WL_DATA_OFFER)))
 (DEFMETHOD REQ-FINISH ((OBJ WL_DATA_OFFER)))
 (DEFMETHOD REQ-SET_ACTIONS ((OBJ WL_DATA_OFFER) DND_ACTIONS PREFERRED_ACTION))
 (DEFMETHOD MATCH-EVENT-OPCODE ((OBJ "wl_data_offer") OPCODE)
   (NTH OPCODE '(EVT-OFFER EVT-SOURCE_ACTIONS EVT-ACTION)))
 (DEFMETHOD MATCH-REQUEST-OPCODE ((OBJ "wl_data_offer") OPCODE)
   (NTH OPCODE
        '(EVT-ACCEPT EVT-RECEIVE EVT-DESTROY EVT-FINISH EVT-SET_ACTIONS))))

((DEFPACKAGE :WL_DATA_SOURCE) (IN-PACKAGE :WL_DATA_SOURCE)
 (DEFCLASS WL_DATA_SOURCE (WL:WL-OBJECT)
           ((CLIENT :INITARG :CLIENT :ACCESSOR CLIENT)))
 (DEFMETHOD EVT-TARGET ((OBJ WL_DATA_SOURCE) MIME_TYPE))
 (DEFMETHOD EVT-SEND ((OBJ WL_DATA_SOURCE) MIME_TYPE FD))
 (DEFMETHOD EVT-CANCELLED ((OBJ WL_DATA_SOURCE)))
 (DEFMETHOD EVT-DND_DROP_PERFORMED ((OBJ WL_DATA_SOURCE)))
 (DEFMETHOD EVT-DND_FINISHED ((OBJ WL_DATA_SOURCE)))
 (DEFMETHOD EVT-ACTION ((OBJ WL_DATA_SOURCE) DND_ACTION))
 (DEFMETHOD REQ-OFFER ((OBJ WL_DATA_SOURCE) MIME_TYPE))
 (DEFMETHOD REQ-DESTROY ((OBJ WL_DATA_SOURCE)))
 (DEFMETHOD REQ-SET_ACTIONS ((OBJ WL_DATA_SOURCE) DND_ACTIONS))
 (DEFMETHOD MATCH-EVENT-OPCODE ((OBJ "wl_data_source") OPCODE)
   (NTH OPCODE
        '(EVT-TARGET EVT-SEND EVT-CANCELLED EVT-DND_DROP_PERFORMED
          EVT-DND_FINISHED EVT-ACTION)))
 (DEFMETHOD MATCH-REQUEST-OPCODE ((OBJ "wl_data_source") OPCODE)
   (NTH OPCODE '(EVT-OFFER EVT-DESTROY EVT-SET_ACTIONS))))

((DEFPACKAGE :WL_DATA_DEVICE) (IN-PACKAGE :WL_DATA_DEVICE)
 (DEFCLASS WL_DATA_DEVICE (WL:WL-OBJECT)
           ((CLIENT :INITARG :CLIENT :ACCESSOR CLIENT)))
 (DEFMETHOD EVT-DATA_OFFER ((OBJ WL_DATA_DEVICE) ID))
 (DEFMETHOD EVT-ENTER ((OBJ WL_DATA_DEVICE) SERIAL SURFACE X Y ID))
 (DEFMETHOD EVT-LEAVE ((OBJ WL_DATA_DEVICE)))
 (DEFMETHOD EVT-MOTION ((OBJ WL_DATA_DEVICE) TIME X Y))
 (DEFMETHOD EVT-DROP ((OBJ WL_DATA_DEVICE)))
 (DEFMETHOD EVT-SELECTION ((OBJ WL_DATA_DEVICE) ID))
 (DEFMETHOD REQ-START_DRAG ((OBJ WL_DATA_DEVICE) SOURCE ORIGIN ICON SERIAL))
 (DEFMETHOD REQ-SET_SELECTION ((OBJ WL_DATA_DEVICE) SOURCE SERIAL))
 (DEFMETHOD REQ-RELEASE ((OBJ WL_DATA_DEVICE)))
 (DEFMETHOD MATCH-EVENT-OPCODE ((OBJ "wl_data_device") OPCODE)
   (NTH OPCODE
        '(EVT-DATA_OFFER EVT-ENTER EVT-LEAVE EVT-MOTION EVT-DROP
          EVT-SELECTION)))
 (DEFMETHOD MATCH-REQUEST-OPCODE ((OBJ "wl_data_device") OPCODE)
   (NTH OPCODE '(EVT-START_DRAG EVT-SET_SELECTION EVT-RELEASE))))

((DEFPACKAGE :WL_DATA_DEVICE_MANAGER) (IN-PACKAGE :WL_DATA_DEVICE_MANAGER)
 (DEFCLASS WL_DATA_DEVICE_MANAGER (WL:WL-OBJECT)
           ((CLIENT :INITARG :CLIENT :ACCESSOR CLIENT)))
 (DEFMETHOD REQ-CREATE_DATA_SOURCE ((OBJ WL_DATA_DEVICE_MANAGER) ID))
 (DEFMETHOD REQ-GET_DATA_DEVICE ((OBJ WL_DATA_DEVICE_MANAGER) ID SEAT))
 (DEFMETHOD MATCH-EVENT-OPCODE ((OBJ "wl_data_device_manager") OPCODE)
   (NTH OPCODE 'NIL))
 (DEFMETHOD MATCH-REQUEST-OPCODE ((OBJ "wl_data_device_manager") OPCODE)
   (NTH OPCODE '(EVT-CREATE_DATA_SOURCE EVT-GET_DATA_DEVICE))))

((DEFPACKAGE :WL_SHELL) (IN-PACKAGE :WL_SHELL)
 (DEFCLASS WL_SHELL (WL:WL-OBJECT)
           ((CLIENT :INITARG :CLIENT :ACCESSOR CLIENT)))
 (DEFMETHOD REQ-GET_SHELL_SURFACE ((OBJ WL_SHELL) ID SURFACE))
 (DEFMETHOD MATCH-EVENT-OPCODE ((OBJ "wl_shell") OPCODE) (NTH OPCODE 'NIL))
 (DEFMETHOD MATCH-REQUEST-OPCODE ((OBJ "wl_shell") OPCODE)
   (NTH OPCODE '(EVT-GET_SHELL_SURFACE))))

((DEFPACKAGE :WL_SHELL_SURFACE) (IN-PACKAGE :WL_SHELL_SURFACE)
 (DEFCLASS WL_SHELL_SURFACE (WL:WL-OBJECT)
           ((CLIENT :INITARG :CLIENT :ACCESSOR CLIENT)))
 (DEFMETHOD EVT-PING ((OBJ WL_SHELL_SURFACE) SERIAL))
 (DEFMETHOD EVT-CONFIGURE ((OBJ WL_SHELL_SURFACE) EDGES WIDTH HEIGHT))
 (DEFMETHOD EVT-POPUP_DONE ((OBJ WL_SHELL_SURFACE)))
 (DEFMETHOD REQ-PONG ((OBJ WL_SHELL_SURFACE) SERIAL))
 (DEFMETHOD REQ-MOVE ((OBJ WL_SHELL_SURFACE) SEAT SERIAL))
 (DEFMETHOD REQ-RESIZE ((OBJ WL_SHELL_SURFACE) SEAT SERIAL EDGES))
 (DEFMETHOD REQ-SET_TOPLEVEL ((OBJ WL_SHELL_SURFACE)))
 (DEFMETHOD REQ-SET_TRANSIENT ((OBJ WL_SHELL_SURFACE) PARENT X Y FLAGS))
 (DEFMETHOD REQ-SET_FULLSCREEN
            ((OBJ WL_SHELL_SURFACE) METHOD FRAMERATE OUTPUT))
 (DEFMETHOD REQ-SET_POPUP
            ((OBJ WL_SHELL_SURFACE) SEAT SERIAL PARENT X Y FLAGS))
 (DEFMETHOD REQ-SET_MAXIMIZED ((OBJ WL_SHELL_SURFACE) OUTPUT))
 (DEFMETHOD REQ-SET_TITLE ((OBJ WL_SHELL_SURFACE) TITLE))
 (DEFMETHOD REQ-SET_CLASS ((OBJ WL_SHELL_SURFACE) CLASS_))
 (DEFMETHOD MATCH-EVENT-OPCODE ((OBJ "wl_shell_surface") OPCODE)
   (NTH OPCODE '(EVT-PING EVT-CONFIGURE EVT-POPUP_DONE)))
 (DEFMETHOD MATCH-REQUEST-OPCODE ((OBJ "wl_shell_surface") OPCODE)
   (NTH OPCODE
        '(EVT-PONG EVT-MOVE EVT-RESIZE EVT-SET_TOPLEVEL EVT-SET_TRANSIENT
          EVT-SET_FULLSCREEN EVT-SET_POPUP EVT-SET_MAXIMIZED EVT-SET_TITLE
          EVT-SET_CLASS))))

((DEFPACKAGE :WL_SURFACE) (IN-PACKAGE :WL_SURFACE)
 (DEFCLASS WL_SURFACE (WL:WL-OBJECT)
           ((CLIENT :INITARG :CLIENT :ACCESSOR CLIENT)))
 (DEFMETHOD EVT-ENTER ((OBJ WL_SURFACE) OUTPUT))
 (DEFMETHOD EVT-LEAVE ((OBJ WL_SURFACE) OUTPUT))
 (DEFMETHOD EVT-PREFERRED_BUFFER_SCALE ((OBJ WL_SURFACE) FACTOR))
 (DEFMETHOD EVT-PREFERRED_BUFFER_TRANSFORM ((OBJ WL_SURFACE) TRANSFORM))
 (DEFMETHOD REQ-DESTROY ((OBJ WL_SURFACE)))
 (DEFMETHOD REQ-ATTACH ((OBJ WL_SURFACE) BUFFER X Y))
 (DEFMETHOD REQ-DAMAGE ((OBJ WL_SURFACE) X Y WIDTH HEIGHT))
 (DEFMETHOD REQ-FRAME ((OBJ WL_SURFACE) CALLBACK))
 (DEFMETHOD REQ-SET_OPAQUE_REGION ((OBJ WL_SURFACE) REGION))
 (DEFMETHOD REQ-SET_INPUT_REGION ((OBJ WL_SURFACE) REGION))
 (DEFMETHOD REQ-COMMIT ((OBJ WL_SURFACE)))
 (DEFMETHOD REQ-SET_BUFFER_TRANSFORM ((OBJ WL_SURFACE) TRANSFORM))
 (DEFMETHOD REQ-SET_BUFFER_SCALE ((OBJ WL_SURFACE) SCALE))
 (DEFMETHOD REQ-DAMAGE_BUFFER ((OBJ WL_SURFACE) X Y WIDTH HEIGHT))
 (DEFMETHOD REQ-OFFSET ((OBJ WL_SURFACE) X Y))
 (DEFMETHOD MATCH-EVENT-OPCODE ((OBJ "wl_surface") OPCODE)
   (NTH OPCODE
        '(EVT-ENTER EVT-LEAVE EVT-PREFERRED_BUFFER_SCALE
          EVT-PREFERRED_BUFFER_TRANSFORM)))
 (DEFMETHOD MATCH-REQUEST-OPCODE ((OBJ "wl_surface") OPCODE)
   (NTH OPCODE
        '(EVT-DESTROY EVT-ATTACH EVT-DAMAGE EVT-FRAME EVT-SET_OPAQUE_REGION
          EVT-SET_INPUT_REGION EVT-COMMIT EVT-SET_BUFFER_TRANSFORM
          EVT-SET_BUFFER_SCALE EVT-DAMAGE_BUFFER EVT-OFFSET))))

((DEFPACKAGE :WL_SEAT) (IN-PACKAGE :WL_SEAT)
 (DEFCLASS WL_SEAT (WL:WL-OBJECT) ((CLIENT :INITARG :CLIENT :ACCESSOR CLIENT)))
 (DEFMETHOD EVT-CAPABILITIES ((OBJ WL_SEAT) CAPABILITIES))
 (DEFMETHOD EVT-NAME ((OBJ WL_SEAT) NAME))
 (DEFMETHOD REQ-GET_POINTER ((OBJ WL_SEAT) ID))
 (DEFMETHOD REQ-GET_KEYBOARD ((OBJ WL_SEAT) ID))
 (DEFMETHOD REQ-GET_TOUCH ((OBJ WL_SEAT) ID))
 (DEFMETHOD REQ-RELEASE ((OBJ WL_SEAT)))
 (DEFMETHOD MATCH-EVENT-OPCODE ((OBJ "wl_seat") OPCODE)
   (NTH OPCODE '(EVT-CAPABILITIES EVT-NAME)))
 (DEFMETHOD MATCH-REQUEST-OPCODE ((OBJ "wl_seat") OPCODE)
   (NTH OPCODE '(EVT-GET_POINTER EVT-GET_KEYBOARD EVT-GET_TOUCH EVT-RELEASE))))

((DEFPACKAGE :WL_POINTER) (IN-PACKAGE :WL_POINTER)
 (DEFCLASS WL_POINTER (WL:WL-OBJECT)
           ((CLIENT :INITARG :CLIENT :ACCESSOR CLIENT)))
 (DEFMETHOD EVT-ENTER ((OBJ WL_POINTER) SERIAL SURFACE SURFACE_X SURFACE_Y))
 (DEFMETHOD EVT-LEAVE ((OBJ WL_POINTER) SERIAL SURFACE))
 (DEFMETHOD EVT-MOTION ((OBJ WL_POINTER) TIME SURFACE_X SURFACE_Y))
 (DEFMETHOD EVT-BUTTON ((OBJ WL_POINTER) SERIAL TIME BUTTON STATE))
 (DEFMETHOD EVT-AXIS ((OBJ WL_POINTER) TIME AXIS VALUE))
 (DEFMETHOD EVT-FRAME ((OBJ WL_POINTER)))
 (DEFMETHOD EVT-AXIS_SOURCE ((OBJ WL_POINTER) AXIS_SOURCE))
 (DEFMETHOD EVT-AXIS_STOP ((OBJ WL_POINTER) TIME AXIS))
 (DEFMETHOD EVT-AXIS_DISCRETE ((OBJ WL_POINTER) AXIS DISCRETE))
 (DEFMETHOD EVT-AXIS_VALUE120 ((OBJ WL_POINTER) AXIS VALUE120))
 (DEFMETHOD EVT-AXIS_RELATIVE_DIRECTION ((OBJ WL_POINTER) AXIS DIRECTION))
 (DEFMETHOD REQ-SET_CURSOR
            ((OBJ WL_POINTER) SERIAL SURFACE HOTSPOT_X HOTSPOT_Y))
 (DEFMETHOD REQ-RELEASE ((OBJ WL_POINTER)))
 (DEFMETHOD MATCH-EVENT-OPCODE ((OBJ "wl_pointer") OPCODE)
   (NTH OPCODE
        '(EVT-ENTER EVT-LEAVE EVT-MOTION EVT-BUTTON EVT-AXIS EVT-FRAME
          EVT-AXIS_SOURCE EVT-AXIS_STOP EVT-AXIS_DISCRETE EVT-AXIS_VALUE120
          EVT-AXIS_RELATIVE_DIRECTION)))
 (DEFMETHOD MATCH-REQUEST-OPCODE ((OBJ "wl_pointer") OPCODE)
   (NTH OPCODE '(EVT-SET_CURSOR EVT-RELEASE))))

((DEFPACKAGE :WL_KEYBOARD) (IN-PACKAGE :WL_KEYBOARD)
 (DEFCLASS WL_KEYBOARD (WL:WL-OBJECT)
           ((CLIENT :INITARG :CLIENT :ACCESSOR CLIENT)))
 (DEFMETHOD EVT-KEYMAP ((OBJ WL_KEYBOARD) FORMAT FD SIZE))
 (DEFMETHOD EVT-ENTER ((OBJ WL_KEYBOARD) SERIAL SURFACE KEYS))
 (DEFMETHOD EVT-LEAVE ((OBJ WL_KEYBOARD) SERIAL SURFACE))
 (DEFMETHOD EVT-KEY ((OBJ WL_KEYBOARD) SERIAL TIME KEY STATE))
 (DEFMETHOD EVT-MODIFIERS
            ((OBJ WL_KEYBOARD) SERIAL MODS_DEPRESSED MODS_LATCHED MODS_LOCKED
             GROUP))
 (DEFMETHOD EVT-REPEAT_INFO ((OBJ WL_KEYBOARD) RATE DELAY))
 (DEFMETHOD REQ-RELEASE ((OBJ WL_KEYBOARD)))
 (DEFMETHOD MATCH-EVENT-OPCODE ((OBJ "wl_keyboard") OPCODE)
   (NTH OPCODE
        '(EVT-KEYMAP EVT-ENTER EVT-LEAVE EVT-KEY EVT-MODIFIERS
          EVT-REPEAT_INFO)))
 (DEFMETHOD MATCH-REQUEST-OPCODE ((OBJ "wl_keyboard") OPCODE)
   (NTH OPCODE '(EVT-RELEASE))))

((DEFPACKAGE :WL_TOUCH) (IN-PACKAGE :WL_TOUCH)
 (DEFCLASS WL_TOUCH (WL:WL-OBJECT)
           ((CLIENT :INITARG :CLIENT :ACCESSOR CLIENT)))
 (DEFMETHOD EVT-DOWN ((OBJ WL_TOUCH) SERIAL TIME SURFACE ID X Y))
 (DEFMETHOD EVT-UP ((OBJ WL_TOUCH) SERIAL TIME ID))
 (DEFMETHOD EVT-MOTION ((OBJ WL_TOUCH) TIME ID X Y))
 (DEFMETHOD EVT-FRAME ((OBJ WL_TOUCH))) (DEFMETHOD EVT-CANCEL ((OBJ WL_TOUCH)))
 (DEFMETHOD EVT-SHAPE ((OBJ WL_TOUCH) ID MAJOR MINOR))
 (DEFMETHOD EVT-ORIENTATION ((OBJ WL_TOUCH) ID ORIENTATION))
 (DEFMETHOD REQ-RELEASE ((OBJ WL_TOUCH)))
 (DEFMETHOD MATCH-EVENT-OPCODE ((OBJ "wl_touch") OPCODE)
   (NTH OPCODE
        '(EVT-DOWN EVT-UP EVT-MOTION EVT-FRAME EVT-CANCEL EVT-SHAPE
          EVT-ORIENTATION)))
 (DEFMETHOD MATCH-REQUEST-OPCODE ((OBJ "wl_touch") OPCODE)
   (NTH OPCODE '(EVT-RELEASE))))

((DEFPACKAGE :WL_OUTPUT) (IN-PACKAGE :WL_OUTPUT)
 (DEFCLASS WL_OUTPUT (WL:WL-OBJECT)
           ((CLIENT :INITARG :CLIENT :ACCESSOR CLIENT)))
 (DEFMETHOD EVT-GEOMETRY
            ((OBJ WL_OUTPUT) X Y PHYSICAL_WIDTH PHYSICAL_HEIGHT SUBPIXEL MAKE
             MODEL TRANSFORM))
 (DEFMETHOD EVT-MODE ((OBJ WL_OUTPUT) FLAGS WIDTH HEIGHT REFRESH))
 (DEFMETHOD EVT-DONE ((OBJ WL_OUTPUT)))
 (DEFMETHOD EVT-SCALE ((OBJ WL_OUTPUT) FACTOR))
 (DEFMETHOD EVT-NAME ((OBJ WL_OUTPUT) NAME))
 (DEFMETHOD EVT-DESCRIPTION ((OBJ WL_OUTPUT) DESCRIPTION))
 (DEFMETHOD REQ-RELEASE ((OBJ WL_OUTPUT)))
 (DEFMETHOD MATCH-EVENT-OPCODE ((OBJ "wl_output") OPCODE)
   (NTH OPCODE
        '(EVT-GEOMETRY EVT-MODE EVT-DONE EVT-SCALE EVT-NAME EVT-DESCRIPTION)))
 (DEFMETHOD MATCH-REQUEST-OPCODE ((OBJ "wl_output") OPCODE)
   (NTH OPCODE '(EVT-RELEASE))))

((DEFPACKAGE :WL_REGION) (IN-PACKAGE :WL_REGION)
 (DEFCLASS WL_REGION (WL:WL-OBJECT)
           ((CLIENT :INITARG :CLIENT :ACCESSOR CLIENT)))
 (DEFMETHOD REQ-DESTROY ((OBJ WL_REGION)))
 (DEFMETHOD REQ-ADD ((OBJ WL_REGION) X Y WIDTH HEIGHT))
 (DEFMETHOD REQ-SUBTRACT ((OBJ WL_REGION) X Y WIDTH HEIGHT))
 (DEFMETHOD MATCH-EVENT-OPCODE ((OBJ "wl_region") OPCODE) (NTH OPCODE 'NIL))
 (DEFMETHOD MATCH-REQUEST-OPCODE ((OBJ "wl_region") OPCODE)
   (NTH OPCODE '(EVT-DESTROY EVT-ADD EVT-SUBTRACT))))

((DEFPACKAGE :WL_SUBCOMPOSITOR) (IN-PACKAGE :WL_SUBCOMPOSITOR)
 (DEFCLASS WL_SUBCOMPOSITOR (WL:WL-OBJECT)
           ((CLIENT :INITARG :CLIENT :ACCESSOR CLIENT)))
 (DEFMETHOD REQ-DESTROY ((OBJ WL_SUBCOMPOSITOR)))
 (DEFMETHOD REQ-GET_SUBSURFACE ((OBJ WL_SUBCOMPOSITOR) ID SURFACE PARENT))
 (DEFMETHOD MATCH-EVENT-OPCODE ((OBJ "wl_subcompositor") OPCODE)
   (NTH OPCODE 'NIL))
 (DEFMETHOD MATCH-REQUEST-OPCODE ((OBJ "wl_subcompositor") OPCODE)
   (NTH OPCODE '(EVT-DESTROY EVT-GET_SUBSURFACE))))

((DEFPACKAGE :WL_SUBSURFACE) (IN-PACKAGE :WL_SUBSURFACE)
 (DEFCLASS WL_SUBSURFACE (WL:WL-OBJECT)
           ((CLIENT :INITARG :CLIENT :ACCESSOR CLIENT)))
 (DEFMETHOD REQ-DESTROY ((OBJ WL_SUBSURFACE)))
 (DEFMETHOD REQ-SET_POSITION ((OBJ WL_SUBSURFACE) X Y))
 (DEFMETHOD REQ-PLACE_ABOVE ((OBJ WL_SUBSURFACE) SIBLING))
 (DEFMETHOD REQ-PLACE_BELOW ((OBJ WL_SUBSURFACE) SIBLING))
 (DEFMETHOD REQ-SET_SYNC ((OBJ WL_SUBSURFACE)))
 (DEFMETHOD REQ-SET_DESYNC ((OBJ WL_SUBSURFACE)))
 (DEFMETHOD MATCH-EVENT-OPCODE ((OBJ "wl_subsurface") OPCODE)
   (NTH OPCODE 'NIL))
 (DEFMETHOD MATCH-REQUEST-OPCODE ((OBJ "wl_subsurface") OPCODE)
   (NTH OPCODE
        '(EVT-DESTROY EVT-SET_POSITION EVT-PLACE_ABOVE EVT-PLACE_BELOW
          EVT-SET_SYNC EVT-SET_DESYNC))))

